Master:
  AuthorizationStrategy: |-
    <authorizationStrategy class="com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy">
      <roleMap type="projectRoles"/>
      <roleMap type="globalRoles">
        <role name="admin" pattern=".*">
          <permissions>
            <permission>hudson.model.View.Delete</permission>
            <permission>hudson.model.Computer.Connect</permission>
            <permission>hudson.model.Run.Delete</permission>
            <permission>com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains</permission>
            <permission>hudson.model.Computer.Create</permission>
            <permission>hudson.model.View.Configure</permission>
            <permission>hudson.model.Computer.Build</permission>
            <permission>hudson.model.Item.Configure</permission>
            <permission>hudson.model.Hudson.Administer</permission>
            <permission>hudson.model.Item.Cancel</permission>
            <permission>hudson.model.Item.Read</permission>
            <permission>com.cloudbees.plugins.credentials.CredentialsProvider.View</permission>
            <permission>hudson.model.Computer.Delete</permission>
            <permission>hudson.model.Item.Build</permission>
            <permission>hudson.scm.SCM.Tag</permission>
            <permission>hudson.model.Item.Move</permission>
            <permission>hudson.model.Item.Discover</permission>
            <permission>hudson.model.Hudson.Read</permission>
            <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Update</permission>
            <permission>hudson.model.Item.Create</permission>
            <permission>hudson.model.Item.Workspace</permission>
            <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Delete</permission>
            <permission>hudson.model.Computer.Provision</permission>
            <permission>hudson.model.Run.Replay</permission>
            <permission>hudson.model.View.Read</permission>
            <permission>hudson.model.View.Create</permission>
            <permission>hudson.model.Item.Delete</permission>
            <permission>hudson.model.Computer.Configure</permission>
            <permission>com.cloudbees.plugins.credentials.CredentialsProvider.Create</permission>
            <permission>hudson.model.Computer.Disconnect</permission>
            <permission>hudson.model.Run.Update</permission>
          </permissions>
          <assignedSIDs>
            <sid>manikann@gmail.com</sid>
            <sid>manikandan.natarajan@anz.com</sid>
          </assignedSIDs>
        </role>
        <role name="viewer" pattern=".*">
          <permissions>
            <permission>hudson.model.Hudson.Read</permission>
          </permissions>
          <assignedSIDs>
            <sid>nataram767579@gmail.com</sid>
          </assignedSIDs>
        </role>
      </roleMap>
      <roleMap type="slaveRoles"/>
    </authorizationStrategy>
  ContainerEnv:
    - name: JENKINS_HOSTNAME
      value: "http://jenkins.manikann.com:8080"
    - name: GOOGLE_OAUTH_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: google-oauth
          key: client-id
    - name: GOOGLE_OAUTH_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: google-oauth
          key: client-secret
  ServiceType: ClusterIP
  ServiceAnnotations:
    cloud.google.com/load-balancer-type: Internal
  JavaOpts: >
    -Xms512m -Xmx2g
  InstallPlugins:
  InitScripts:
    jenkins-hostname: |-
      import hudson.model.*;
      import jenkins.model.*;

      println "About to configure jenkins hostname"

      def env = System.getenv()
      def hostname = env['JENKINS_HOSTNAME']
      def descriptor = Jenkins.getInstance().getDescriptor("jenkins.model.JenkinsLocationConfiguration")

      println "Changing Hostname from ${descriptor.getUrl()} to ${hostname}"
      println "Admin email: ${descriptor.getAdminAddress()}"

      descriptor.setUrl(hostname)
      descriptor.save()

      println "Done configuring jenkins hostname"

    google-oauth: |-
      import hudson.model.*;
      import hudson.util.*;
      import jenkins.model.*;
      import org.jenkinsci.plugins.googlelogin.*;

      println "About to configure google oauth"

      def env = System.getenv()
      def client_id = env['GOOGLE_OAUTH_CLIENT_ID']
      def client_secret = env['GOOGLE_OAUTH_CLIENT_SECRET']
      def instance = Jenkins.getInstance()
      def realm = new GoogleOAuth2SecurityRealm( client_id, client_secret, null )

      println "Google OAuth client-id ${client_id}"

      instance.setSecurityRealm(realm)
      instance.save()

      println "Done configuring google oauth"
rbac:
  install: true
  serviceAccountName: jenkins
